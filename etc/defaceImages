#!/bin/bash

if [ "$#" -lt 1 ]
then
    echo "Usage: $0 <in_bids> <subj ID> <session id (optional)>"
	exit 1
fi 
in_bids=$1

subj=$2
subj=${subj##sub-} #strip off sub- if it exists, to make consistent

if [ "$#" -gt 2 ]
then
    ses=$3
	ses=${ses##ses-} #strip off sub- if it exists, to make consistent
fi
 

	if [ -n "$ses" ]
    then
        out_folder=sub-$subj/ses-$ses
    else
        out_folder=sub-$subj
    fi


    #get image to compute facemask (T1w)
    defacetarget=`ls $in_bids/$out_folder/anat/*T1w.nii.gz 2>/dev/null | head -n 1`

    if [ ! -e $defacetarget ]
    then 
        echo "Defacing disabled since cannot find eligible T1w image"
        exit 1
    fi

    hash=`fslorient -getsform $defacetarget | cksum | cut -f 1 -d ' '`

    #for now, just compute defacing once, and apply to all images with the same FOV

    potential_imgs=`ls $in_bids/$out_folder/anat/*.nii.gz 2>/dev/null | grep -v $defacetarget`	
    other_imgs=""

    for pimg in $potential_imgs
    do
	#check hash against defacemask hash:
    	phash=`fslorient -getsform $pimg | cksum | cut -f 1 -d ' '`
	if [ "$hash" = "$phash" ]
	then
		other_imgs="$other_imgs $pimg"
	fi

    done
    


    deface_args="--verbose --force $defacetarget"

    #if there are other_imgs
    if [ -n "$other_imgs" ]
    then
        deface_args="$deface_args --applyto $other_imgs"
    fi

    
    #2. perform defacing, all images then have _deface.nii.gz generated
    echo pydeface $deface_args 
    pydeface $deface_args 


    #back-up existing, and move <prefix>_deface.nii.gz to <prefix>.nii.gz            #copy images to be defaced to:  sourcedata/no_deface/$out_folder/anat

    nodeface_dir=$in_bids/sourcedata/$out_folder/anat
    mkdir -p $nodeface_dir

    for img in $in_bids/$out_folder/anat/*deface.nii.gz
    do
        im_prefix=${img%_deface.nii.gz}
        in_img=${im_prefix}.nii.gz
        mv -v $in_img $nodeface_dir && mv -v $img $in_img

    done


